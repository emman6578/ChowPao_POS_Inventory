// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())

  email    String  @unique
  name     String
  username String  @unique
  image    String?
  role     Role    @default(DRIVER)

  created DateTime @default(now())
  updated DateTime @updatedAt

  Token                    Token[]
  Cart                     Cart?
  Order                    Order[]
  Delivery                 Delivery[]
  RemainingProductDelivery RemainingProductDelivery[]
  DriverProductSold        DriverProductSold[]
  DriverProductInventory   DriverProductInventory[]
}

model Token {
  id String @id @default(uuid())

  type       Type     @default(EMAIL) // EMAIL || API
  emailToken String?  @unique
  valid      Boolean  @default(true)
  expiration DateTime

  user_id String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  created DateTime @default(now())
  updated DateTime @updatedAt
}

model Product_Info {
  id       String @id @default(uuid())
  name     String
  quantity Int
  price    Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //relationships
  Products   Product @relation(fields: [product_id], references: [id], onDelete: Cascade)
  product_id String  @unique
}

model Category {
  id   String @id @default(uuid())
  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //relationships
  Product Product[]
}

model Product {
  id                  String        @id @default(uuid())
  barcode             String        @unique
  Product_Info        Product_Info?
  Category            Category[]
  supplier            String
  condition           String
  status              String
  minimum_stock_level Int
  maximum_stock_level Int
  description         String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ProductInCart ProductInCart[]

  Order                    Order[]
  RemainingProductDelivery RemainingProductDelivery[]
  DriverProductSold        DriverProductSold[]
  DeliveryProducts         DeliveryProducts[]

  DriverProductInventory DriverProductInventory[]
}

model Cart {
  id String @id @default(uuid())

  ProductInCart ProductInCart[]
  total_price   Float?

  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductInCart {
  id String @id @default(uuid())

  product    Product @relation(fields: [product_id], references: [id], onDelete: Cascade)
  product_id String

  quantity Int
  total    Float
  status   Status?

  cart    Cart   @relation(fields: [cart_id], references: [id], onDelete: Cascade)
  cart_id String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([product_id, cart_id])
}

model Order {
  id String @id @default(uuid())

  total          Float //base on the product get in the product in cart calculate the total order
  payment_status PaymentStatus?
  quantity       Int //this quntatity is getting from the ProductinCart
  status         Status? //also for status fetch first the product in cart to get the status
  address        String

  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String

  product Product[] //to get the product id first fetch the productin cart find the id of the product inside it

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Delivery {
  id String @id @default(uuid())

  driver    User   @relation(fields: [driver_id], references: [id], onDelete: Cascade)
  driver_id String

  Products                DeliveryProducts[]
  total_delivery_quantity Int?
  total_delivery_price    Float?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DeliveryProducts {
  id String @id @default(uuid())

  product  Product[]
  quantity Int
  total    Float

  status   DeliveryStatus @default(PENDING)
  approval Approval       @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Delivery   Delivery? @relation(fields: [deliveryId], references: [id])
  deliveryId String?
}

model DriverProductInventory {
  id String @id @default(uuid())

  driver    User   @relation(fields: [driver_id], references: [id], onDelete: Cascade)
  driver_id String

  Product Product[]
}

model DriverProductSold {
  id String @id @default(uuid())

  driver      User[]
  product     Product[]
  total_sales Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RemainingProductDelivery {
  id String @id @default(uuid())

  driver  User[]
  product Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Type {
  EMAIL
  API
}

enum Role {
  ADMIN
  DRIVER
}

enum Status {
  ACTIVE
  COMPLETED
  ABANDONED
}

enum PaymentStatus {
  PAID
  UNPAID
  PROCESSING
}

enum DeliveryStatus {
  PENDING
  IN_TRANSIT
  DELIVERED
  FAILED
}

enum Approval {
  PENDING
  DISAPPROVED
  APPROVED
}
