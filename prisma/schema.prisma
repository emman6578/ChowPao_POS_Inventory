// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  // provider = "postgresql"
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Admin {
  id String @id @default(uuid())

  auth     Auth?
  fullname String
  username String  @unique
  image    String?
  role     Role    @default(ADMIN)

  created   DateTime  @default(now())
  updated   DateTime  @updatedAt
  lastLogin DateTime?

  Token Token[]
  Cart  Cart?
  Order Order[]

  Delivery Delivery[]
}

model Auth {
  id String @id @default(uuid())

  email String @unique

  admin    Admin  @relation(fields: [admin_id], references: [id], onDelete: Cascade)
  admin_id String @unique

  created DateTime @default(now())
  updated DateTime @updatedAt
}

model Token {
  id String @id @default(uuid())

  type       Type     @default(EMAIL) // EMAIL || API
  emailToken String?  @unique
  valid      Boolean  @default(true)
  expiration DateTime

  admin    Admin?  @relation(fields: [admin_id], references: [id], onDelete: Cascade)
  admin_id String?

  Driver   Driver? @relation(fields: [driverId], references: [id])
  driverId String?

  created DateTime @default(now())
  updated DateTime @updatedAt
}

model Product {
  id String @id @default(uuid())

  barcode             String       @unique
  name                String
  quantity            Int
  price               Float
  Category            Category[]
  brand               String
  description         String
  unit_of_measure     Measurement?
  expiration          String
  date_of_manufacture String
  date_of_entry       DateTime     @default(now())
  supplier            String

  stock_status        StockStatus?
  minimum_stock_level Int
  maximum_stock_level Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ProductInCart ProductInCart[]
  Order         Order[]
  Delivery      Delivery[]
}

model Category {
  id String @id @default(uuid())

  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Product Product[]
}

model Cart {
  id String @id @default(uuid())

  ProductInCart ProductInCart[]
  total_price   Float?

  admin    Admin  @relation(fields: [admin_id], references: [id], onDelete: Cascade)
  admin_id String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductInCart {
  id String @id @default(uuid())

  product    Product @relation(fields: [product_id], references: [id], onDelete: Cascade)
  product_id String

  quantity Int
  total    Float
  status   Status?

  cart    Cart   @relation(fields: [cart_id], references: [id], onDelete: Cascade)
  cart_id String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([product_id, cart_id])
}

model Order {
  id String @id @default(uuid())

  total          Float //base on the product get in the product in cart calculate the total order
  payment_status PaymentStatus?
  quantity       Int //this quntatity is getting from the ProductinCart
  status         Status? //also for status fetch first the product in cart to get the status
  address        String

  admin    Admin  @relation(fields: [admin_id], references: [id], onDelete: Cascade)
  admin_id String

  product Product[] //to get the product id first fetch the productin cart find the id of the product inside it

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Delivery {
  id String @id @default(uuid())

  admin    Admin?  @relation(fields: [admin_id], references: [id], onDelete: Cascade)
  admin_id String?

  Products Product[]
  quantity Int?
  total    Float?

  status   DeliveryStatus @default(PENDING)
  approval Approval       @default(PENDING)

  total_delivery_quantity Int?
  total_delivery_price    Float?

  driver    Driver? @relation(fields: [driver_id], references: [id])
  driver_id String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Type {
  EMAIL
  API
}

enum Role {
  ADMIN
  DRIVER
}

enum Measurement {
  KILOGRAMS
  LITERS
  PIECES
}

enum StockStatus {
  IN_STOCK
  OUT_OF_STOCK
  LOW_STOCK
}

enum Status {
  ACTIVE
  COMPLETED
  ABANDONED
}

enum PaymentStatus {
  PAID
  UNPAID
  PROCESSING
}

enum DeliveryStatus {
  PENDING
  IN_TRANSIT
  DELIVERED
  FAILED
}

enum Approval {
  PENDING
  DISAPPROVED
  APPROVED
}

model Driver {
  id String @id @default(uuid())

  fullname String
  email    String  @unique
  image    String?

  lastLogin DateTime?

  created DateTime @default(now())
  updated DateTime @updatedAt

  Token    Token[]
  Delivery Delivery[]
}
